# data.aws_availability_zones.available_zones:
data "aws_availability_zones" "available_zones" {
    group_names = [
        "us-west-2",
    ]
    id          = "us-west-2"
    names       = [
        "us-west-2a",
        "us-west-2b",
        "us-west-2c",
        "us-west-2d",
    ]
    state       = "available"
    zone_ids    = [
        "usw2-az1",
        "usw2-az2",
        "usw2-az3",
        "usw2-az4",
    ]
}

# data.aws_ecr_repository.ts_backend_repo:
data "aws_ecr_repository" "ts_backend_repo" {
    arn                          = "arn:aws:ecr:us-west-2:121491013433:repository/ts_backend_app"
    encryption_configuration     = [
        {
            encryption_type = "AES256"
            kms_key         = ""
        },
    ]
    id                           = "ts_backend_app"
    image_scanning_configuration = [
        {
            scan_on_push = false
        },
    ]
    image_tag_mutability         = "MUTABLE"
    most_recent_image_tags       = [
        "latest",
    ]
    name                         = "ts_backend_app"
    registry_id                  = "121491013433"
    repository_url               = "121491013433.dkr.ecr.us-west-2.amazonaws.com/ts_backend_app"
    tags                         = {}
}

# aws_acm_certificate.ssl_cert:
resource "aws_acm_certificate" "ssl_cert" {
    arn                       = "arn:aws:acm:us-west-2:121491013433:certificate/b5308b9c-eb04-41aa-a36a-15659ce824d0"
    domain_name               = "mptdemo.com"
    domain_validation_options = [
        {
            domain_name           = "mptdemo.com"
            resource_record_name  = "_85fbe400ba36463c68df9cfdacc668d7.mptdemo.com."
            resource_record_type  = "CNAME"
            resource_record_value = "_c206f383dc49da536c8f3b23548e8c77.fqkcxmstzf.acm-validations.aws."
        },
    ]
    id                        = "arn:aws:acm:us-west-2:121491013433:certificate/b5308b9c-eb04-41aa-a36a-15659ce824d0"
    key_algorithm             = "RSA_2048"
    not_after                 = "2024-10-06T23:59:59Z"
    not_before                = "2023-09-08T00:00:00Z"
    pending_renewal           = false
    renewal_eligibility       = "ELIGIBLE"
    renewal_summary           = []
    status                    = "ISSUED"
    subject_alternative_names = [
        "mptdemo.com",
    ]
    tags                      = {}
    tags_all                  = {}
    type                      = "AMAZON_ISSUED"
    validation_emails         = []
    validation_method         = "DNS"

    options {
        certificate_transparency_logging_preference = "ENABLED"
    }
}

# aws_appautoscaling_policy.backend_scale_in:
resource "aws_appautoscaling_policy" "backend_scale_in" {
    alarm_arns         = []
    arn                = "arn:aws:autoscaling:us-west-2:121491013433:scalingPolicy:0d882253-2a52-47ba-b3c7-293655bbf784:resource/ecs/service/todo-cluster/backend-service:policyName/todo-ecs-backend-scale-in"
    id                 = "todo-ecs-backend-scale-in"
    name               = "todo-ecs-backend-scale-in"
    policy_type        = "StepScaling"
    resource_id        = "service/todo-cluster/backend-service"
    scalable_dimension = "ecs:service:DesiredCount"
    service_namespace  = "ecs"

    step_scaling_policy_configuration {
        adjustment_type          = "ChangeInCapacity"
        cooldown                 = 300
        metric_aggregation_type  = "Average"
        min_adjustment_magnitude = 0

        step_adjustment {
            metric_interval_lower_bound = "30"
            metric_interval_upper_bound = "50"
            scaling_adjustment          = 1
        }
        step_adjustment {
            metric_interval_lower_bound = "50"
            scaling_adjustment          = 2
        }
    }
}

# aws_appautoscaling_policy.backend_scale_out:
resource "aws_appautoscaling_policy" "backend_scale_out" {
    alarm_arns         = [
        "arn:aws:cloudwatch:us-west-2:121491013433:alarm:TargetTracking-service/todo-cluster/backend-service-AlarmHigh-7b317cd7-280e-49ef-9569-53ad99a95b18",
        "arn:aws:cloudwatch:us-west-2:121491013433:alarm:TargetTracking-service/todo-cluster/backend-service-AlarmLow-481e8ef2-01cb-4eff-a23a-9f50a157cb26",
    ]
    arn                = "arn:aws:autoscaling:us-west-2:121491013433:scalingPolicy:0d882253-2a52-47ba-b3c7-293655bbf784:resource/ecs/service/todo-cluster/backend-service:policyName/todo-ecs-backend-scale-out"
    id                 = "todo-ecs-backend-scale-out"
    name               = "todo-ecs-backend-scale-out"
    policy_type        = "TargetTrackingScaling"
    resource_id        = "service/todo-cluster/backend-service"
    scalable_dimension = "ecs:service:DesiredCount"
    service_namespace  = "ecs"

    target_tracking_scaling_policy_configuration {
        disable_scale_in   = false
        scale_in_cooldown  = 60
        scale_out_cooldown = 60
        target_value       = 75

        predefined_metric_specification {
            predefined_metric_type = "ECSServiceAverageCPUUtilization"
        }
    }
}

# aws_appautoscaling_target.ecs_backend_target:
resource "aws_appautoscaling_target" "ecs_backend_target" {
    arn                = "arn:aws:application-autoscaling:us-west-2:121491013433:scalable-target/0ec50d8822532a5247bab3c7293655bbf784"
    id                 = "service/todo-cluster/backend-service"
    max_capacity       = 4
    min_capacity       = 2
    resource_id        = "service/todo-cluster/backend-service"
    role_arn           = "arn:aws:iam::121491013433:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
    scalable_dimension = "ecs:service:DesiredCount"
    service_namespace  = "ecs"
    tags               = {}
    tags_all           = {
        "Environment" = "production"
        "Name"        = "todo-app"
    }
}

# aws_cloudfront_distribution.s3_distribution:
resource "aws_cloudfront_distribution" "s3_distribution" {
    aliases                        = []
    arn                            = "arn:aws:cloudfront::121491013433:distribution/E3D9MK7J0Q4EUQ"
    caller_reference               = "terraform-20230908141534705000000008"
    comment                        = "CloudFront Distribution"
    default_root_object            = "index.html"
    domain_name                    = "d1itiastrdvd4e.cloudfront.net"
    enabled                        = true
    etag                           = "E1X57JOEVC7S6F"
    hosted_zone_id                 = "Z2FDTNDATAQYW2"
    http_version                   = "http2"
    id                             = "E3D9MK7J0Q4EUQ"
    in_progress_validation_batches = 0
    is_ipv6_enabled                = true
    last_modified_time             = "2023-09-08 14:15:34.9 +0000 UTC"
    price_class                    = "PriceClass_100"
    retain_on_delete               = false
    status                         = "Deployed"
    tags                           = {}
    tags_all                       = {
        "Environment" = "production"
        "Name"        = "todo-app"
    }
    trusted_key_groups             = [
        {
            enabled = false
            items   = []
        },
    ]
    trusted_signers                = [
        {
            enabled = false
            items   = []
        },
    ]
    wait_for_deployment            = true

    default_cache_behavior {
        allowed_methods        = [
            "GET",
            "HEAD",
        ]
        cached_methods         = [
            "GET",
            "HEAD",
        ]
        compress               = false
        default_ttl            = 3600
        max_ttl                = 86400
        min_ttl                = 0
        smooth_streaming       = false
        target_origin_id       = "todo-bucket-engaging-lamb"
        trusted_key_groups     = []
        trusted_signers        = []
        viewer_protocol_policy = "redirect-to-https"

        forwarded_values {
            headers                 = []
            query_string            = false
            query_string_cache_keys = []

            cookies {
                forward           = "none"
                whitelisted_names = []
            }
        }
    }

    origin {
        connection_attempts = 3
        connection_timeout  = 10
        domain_name         = "todo-bucket-engaging-lamb.s3.us-west-2.amazonaws.com"
        origin_id           = "todo-bucket-engaging-lamb"

        s3_origin_config {
            origin_access_identity = "origin-access-identity/cloudfront/E217N18Q9GN8HJ"
        }
    }

    restrictions {
        geo_restriction {
            locations        = []
            restriction_type = "none"
        }
    }

    viewer_certificate {
        cloudfront_default_certificate = true
        minimum_protocol_version       = "TLSv1"
    }
}

# aws_cloudfront_origin_access_identity.oai:
resource "aws_cloudfront_origin_access_identity" "oai" {
    caller_reference                = "terraform-20230908141531787500000001"
    cloudfront_access_identity_path = "origin-access-identity/cloudfront/E217N18Q9GN8HJ"
    comment                         = "OAI for website bucket"
    etag                            = "E31O2YLGZI5N11"
    iam_arn                         = "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity E217N18Q9GN8HJ"
    id                              = "E217N18Q9GN8HJ"
    s3_canonical_user_id            = "2c0d81ab6b9a3e996f49663737215b5b4edb3e5830738409688a1f37f2f13968d0bd8e53782399e0f068b8707a19e52c"
}

# aws_cloudwatch_log_group.ecs-tasks:
resource "aws_cloudwatch_log_group" "ecs-tasks" {
    arn               = "arn:aws:logs:us-west-2:121491013433:log-group:todo-production-ecs-tasks-logs"
    id                = "todo-production-ecs-tasks-logs"
    name              = "todo-production-ecs-tasks-logs"
    retention_in_days = 0
    skip_destroy      = false
    tags              = {
        "Application" = "todo"
    }
    tags_all          = {
        "Application" = "todo"
        "Environment" = "production"
        "Name"        = "todo-app"
    }
}

# aws_docdb_cluster.todo_app_docdb_cluster:
resource "aws_docdb_cluster" "todo_app_docdb_cluster" {
    arn                             = "arn:aws:rds:us-west-2:121491013433:cluster:todo-app-docdb-cluster"
    availability_zones              = [
        "us-west-2a",
        "us-west-2b",
        "us-west-2c",
    ]
    backup_retention_period         = 1
    cluster_identifier              = "todo-app-docdb-cluster"
    cluster_members                 = [
        "docdb-instance",
    ]
    cluster_resource_id             = "cluster-T3EM7AUCASESB576WUJUNOKNK4"
    db_cluster_parameter_group_name = "default.docdb4.0"
    db_subnet_group_name            = "main"
    deletion_protection             = false
    enabled_cloudwatch_logs_exports = [
        "audit",
        "profiler",
    ]
    endpoint                        = "todo-app-docdb-cluster.cluster-cllrkqg5wbse.us-west-2.docdb.amazonaws.com"
    engine                          = "docdb"
    engine_version                  = "4.0.0"
    hosted_zone_id                  = "Z9PSE6HRXLC6K"
    id                              = "todo-app-docdb-cluster"
    master_password                 = (sensitive value)
    master_username                 = (sensitive value)
    port                            = 27017
    preferred_backup_window         = "10:52-11:22"
    preferred_maintenance_window    = "thu:13:12-thu:13:42"
    reader_endpoint                 = "todo-app-docdb-cluster.cluster-ro-cllrkqg5wbse.us-west-2.docdb.amazonaws.com"
    skip_final_snapshot             = true
    storage_encrypted               = false
    tags                            = {}
    tags_all                        = {
        "Environment" = "production"
        "Name"        = "todo-app"
    }
    vpc_security_group_ids          = [
        "sg-0a5e0c96543e5353a",
    ]
}

# aws_docdb_cluster_instance.docdb_instance:
resource "aws_docdb_cluster_instance" "docdb_instance" {
    arn                          = "arn:aws:rds:us-west-2:121491013433:db:docdb-instance"
    auto_minor_version_upgrade   = true
    availability_zone            = "us-west-2a"
    ca_cert_identifier           = "rds-ca-2019"
    cluster_identifier           = "todo-app-docdb-cluster"
    db_subnet_group_name         = "main"
    dbi_resource_id              = "db-NP6VHVKBLSEY2OZIWUHIMXEYN4"
    endpoint                     = "docdb-instance.cllrkqg5wbse.us-west-2.docdb.amazonaws.com"
    engine                       = "docdb"
    engine_version               = "4.0.0"
    id                           = "docdb-instance"
    identifier                   = "docdb-instance"
    instance_class               = "db.r5.large"
    port                         = 27017
    preferred_backup_window      = "10:52-11:22"
    preferred_maintenance_window = "thu:06:55-thu:07:25"
    promotion_tier               = 0
    publicly_accessible          = false
    storage_encrypted            = false
    tags                         = {}
    tags_all                     = {
        "Environment" = "production"
        "Name"        = "todo-app"
    }
    writer                       = true
}

# aws_docdb_subnet_group.default:
resource "aws_docdb_subnet_group" "default" {
    arn         = "arn:aws:rds:us-west-2:121491013433:subgrp:main"
    description = "Managed by Terraform"
    id          = "main"
    name        = "main"
    subnet_ids  = [
        "subnet-05e3d596914ead2ef",
        "subnet-0b93fd3fddfcad2bd",
    ]
    tags        = {
        "Name" = "default"
    }
    tags_all    = {
        "Environment" = "production"
        "Name"        = "default"
    }
}

# aws_ecs_cluster.todo_app_cluster:
resource "aws_ecs_cluster" "todo_app_cluster" {
    arn                = "arn:aws:ecs:us-west-2:121491013433:cluster/todo-cluster"
    capacity_providers = []
    id                 = "arn:aws:ecs:us-west-2:121491013433:cluster/todo-cluster"
    name               = "todo-cluster"
    tags               = {}
    tags_all           = {
        "Environment" = "production"
        "Name"        = "todo-app"
    }

    setting {
        name  = "containerInsights"
        value = "disabled"
    }
}

# aws_ecs_service.backend:
resource "aws_ecs_service" "backend" {
    cluster                            = "arn:aws:ecs:us-west-2:121491013433:cluster/todo-cluster"
    deployment_maximum_percent         = 200
    deployment_minimum_healthy_percent = 50
    desired_count                      = 2
    enable_ecs_managed_tags            = false
    enable_execute_command             = false
    health_check_grace_period_seconds  = 0
    iam_role                           = "/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS"
    id                                 = "arn:aws:ecs:us-west-2:121491013433:service/todo-cluster/backend-service"
    launch_type                        = "FARGATE"
    name                               = "backend-service"
    platform_version                   = "LATEST"
    propagate_tags                     = "NONE"
    scheduling_strategy                = "REPLICA"
    tags                               = {}
    tags_all                           = {
        "Environment" = "production"
        "Name"        = "todo-app"
    }
    task_definition                    = "arn:aws:ecs:us-west-2:121491013433:task-definition/backend:39"
    triggers                           = {}
    wait_for_steady_state              = false

    deployment_circuit_breaker {
        enable   = false
        rollback = false
    }

    deployment_controller {
        type = "ECS"
    }

    load_balancer {
        container_name   = "backend"
        container_port   = 5000
        target_group_arn = "arn:aws:elasticloadbalancing:us-west-2:121491013433:targetgroup/todo-backend-target-group/b2d2becf7bbe9ae0"
    }

    network_configuration {
        assign_public_ip = false
        security_groups  = [
            "sg-0f04b5378baee4a15",
        ]
        subnets          = [
            "subnet-05e3d596914ead2ef",
            "subnet-0b93fd3fddfcad2bd",
        ]
    }
}

# aws_ecs_task_definition.backend:
resource "aws_ecs_task_definition" "backend" {
    arn                      = "arn:aws:ecs:us-west-2:121491013433:task-definition/backend:39"
    arn_without_revision     = "arn:aws:ecs:us-west-2:121491013433:task-definition/backend"
    container_definitions    = jsonencode(
        [
            {
                cpu              = 0
                environment      = [
                    {
                        name  = "DB_ENDPOINT"
                        value = "docdb-instance.cllrkqg5wbse.us-west-2.docdb.amazonaws.com"
                    },
                    {
                        name  = "NODEPORT"
                        value = "5000"
                    },
                ]
                essential        = true
                image            = "121491013433.dkr.ecr.us-west-2.amazonaws.com/ts_backend_app:latest"
                logConfiguration = {
                    logDriver = "awslogs"
                    options   = {
                        awslogs-group         = "todo-production-ecs-tasks-logs"
                        awslogs-region        = "us-west-2"
                        awslogs-stream-prefix = "ts-backend"
                    }
                }
                mountPoints      = []
                name             = "backend"
                portMappings     = [
                    {
                        containerPort = 5000
                        hostPort      = 5000
                        protocol      = "tcp"
                    },
                ]
                secrets          = [
                    {
                        name      = "DB_USER"
                        valueFrom = "arn:aws:secretsmanager:us-west-2:121491013433:secret:todo-docdb_credentials-light-mackerel-PXiIe2:username::"
                    },
                    {
                        name      = "DB_PASSWORD"
                        valueFrom = "arn:aws:secretsmanager:us-west-2:121491013433:secret:todo-docdb_credentials-light-mackerel-PXiIe2:password::"
                    },
                ]
                volumesFrom      = []
            },
        ]
    )
    cpu                      = "256"
    execution_role_arn       = "arn:aws:iam::121491013433:role/ecs_execution_role"
    family                   = "backend"
    id                       = "backend"
    memory                   = "512"
    network_mode             = "awsvpc"
    requires_compatibilities = [
        "FARGATE",
    ]
    revision                 = 39
    skip_destroy             = false
    tags                     = {}
    tags_all                 = {
        "Environment" = "production"
        "Name"        = "todo-app"
    }
    task_role_arn            = "arn:aws:iam::121491013433:role/ecs_task_role"
}

# aws_eip.nat:
resource "aws_eip" "nat" {
    allocation_id        = "eipalloc-06ea0efa223d3cce4"
    association_id       = "eipassoc-02a3a9a850dfc1d98"
    domain               = "vpc"
    id                   = "eipalloc-06ea0efa223d3cce4"
    network_border_group = "us-west-2"
    network_interface    = "eni-0780dce576687a5eb"
    private_dns          = "ip-10-10-2-247.us-west-2.compute.internal"
    private_ip           = "10.10.2.247"
    public_dns           = "ec2-52-39-80-135.us-west-2.compute.amazonaws.com"
    public_ip            = "52.39.80.135"
    public_ipv4_pool     = "amazon"
    tags                 = {}
    tags_all             = {
        "Environment" = "production"
        "Name"        = "todo-app"
    }
    vpc                  = true
}

# aws_iam_policy.custom_cloudwatch_permissions:
resource "aws_iam_policy" "custom_cloudwatch_permissions" {
    arn         = "arn:aws:iam::121491013433:policy/CloudWatchCustomPermissions"
    description = "Custom permissions for Cloudwatch"
    id          = "arn:aws:iam::121491013433:policy/CloudWatchCustomPermissions"
    name        = "CloudWatchCustomPermissions"
    path        = "/"
    policy      = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents",
                        "logs:DescribeLogStreams",
                    ]
                    Effect   = "Allow"
                    Resource = [
                        "arn:aws:logs:*:*:*",
                    ]
                    Sid      = "AllowCloudWatchLogs"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    policy_id   = "ANPARYSLNX4446UVKLYLY"
    tags        = {}
    tags_all    = {
        "Environment" = "production"
        "Name"        = "todo-app"
    }
}

# aws_iam_policy.custom_ecr_permissions:
resource "aws_iam_policy" "custom_ecr_permissions" {
    arn         = "arn:aws:iam::121491013433:policy/ECRTaskCustomPermissions"
    description = "Custom permissions for ECR tasks"
    id          = "arn:aws:iam::121491013433:policy/ECRTaskCustomPermissions"
    name        = "ECRTaskCustomPermissions"
    path        = "/"
    policy      = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "ecr:GetAuthorizationToken",
                        "ecr:GetDownloadUrlForLayer",
                        "ecr:BatchGetImage",
                        "ecr:BatchCheckLayerAvailability",
                        "ecr:PutImage",
                        "ecr:InitiateLayerUpload",
                        "ecr:UploadLayerPart",
                        "ecr:CompleteLayerUpload",
                    ]
                    Effect   = "Allow"
                    Resource = [
                        "*",
                    ]
                    Sid      = "AllowPushPull"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    policy_id   = "ANPARYSLNX44ZZSHGKMGF"
    tags        = {}
    tags_all    = {
        "Environment" = "production"
        "Name"        = "todo-app"
    }
}

# aws_iam_policy.ecs_docdb_access:
resource "aws_iam_policy" "ecs_docdb_access" {
    arn         = "arn:aws:iam::121491013433:policy/ecs_docdb_access"
    description = "Permissions for ECS to access DocumentDB and related EC2 resources."
    id          = "arn:aws:iam::121491013433:policy/ecs_docdb_access"
    name        = "ecs_docdb_access"
    path        = "/"
    policy      = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "docdb:*",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                    Sid      = "DocDBFull"
                },
                {
                    Action   = [
                        "ec2:DescribeNetworkInterfaces",
                        "ec2:DescribeVpcs",
                        "ec2:DescribeSubnets",
                        "ec2:DescribeSecurityGroups",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                    Sid      = "EC2Networking"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    policy_id   = "ANPARYSLNX44XGUTA6RXQ"
    tags        = {}
    tags_all    = {
        "Environment" = "production"
        "Name"        = "todo-app"
    }
}

# aws_iam_policy.ecs_secrets_access:
resource "aws_iam_policy" "ecs_secrets_access" {
    arn         = "arn:aws:iam::121491013433:policy/ECSAccessToSecrets"
    description = "Allow ECS tasks to retrieve secrets from Secrets Manager"
    id          = "arn:aws:iam::121491013433:policy/ECSAccessToSecrets"
    name        = "ECSAccessToSecrets"
    path        = "/"
    policy      = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "secretsmanager:GetSecretValue",
                    ]
                    Effect   = "Allow"
                    Resource = "arn:aws:secretsmanager:us-west-2:121491013433:secret:todo-docdb_credentials-light-mackerel-PXiIe2"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    policy_id   = "ANPARYSLNX44XPU7C6TER"
    tags        = {}
    tags_all    = {
        "Environment" = "production"
        "Name"        = "todo-app"
    }
}

# aws_iam_policy.s3_policy_permissions:
resource "aws_iam_policy" "s3_policy_permissions" {
    arn         = "arn:aws:iam::121491013433:policy/S3FullAccessPolicy"
    description = "Policy that allows full access to a specific S3 bucket"
    id          = "arn:aws:iam::121491013433:policy/S3FullAccessPolicy"
    name        = "S3FullAccessPolicy"
    path        = "/"
    policy      = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "s3:GetObject",
                        "s3:PutObject",
                        "s3:DeleteObject",
                        "s3:ListBucket",
                    ]
                    Effect   = "Allow"
                    Resource = [
                        "arn:aws:s3:::todo-bucket-engaging-lamb",
                        "arn:aws:s3:::todo-bucket-engaging-lamb/*",
                    ]
                },
            ]
            Version   = "2012-10-17"
        }
    )
    policy_id   = "ANPARYSLNX443TJRAPAOK"
    tags        = {}
    tags_all    = {
        "Environment" = "production"
        "Name"        = "todo-app"
    }
}

# aws_iam_role.docdb_cloudwatch_role:
resource "aws_iam_role" "docdb_cloudwatch_role" {
    arn                   = "arn:aws:iam::121491013433:role/DocDBCloudWatchRole"
    assume_role_policy    = jsonencode(
        {
            Statement = [
                {
                    Action    = "sts:AssumeRole"
                    Effect    = "Allow"
                    Principal = {
                        Service = "rds.amazonaws.com"
                    }
                },
            ]
            Version   = "2012-10-17"
        }
    )
    create_date           = "2023-09-08T14:15:32Z"
    force_detach_policies = false
    id                    = "DocDBCloudWatchRole"
    managed_policy_arns   = [
        "arn:aws:iam::aws:policy/AmazonRDSFullAccess",
    ]
    max_session_duration  = 3600
    name                  = "DocDBCloudWatchRole"
    path                  = "/"
    role_last_used        = [
        {
            last_used_date = ""
            region         = ""
        },
    ]
    tags                  = {}
    tags_all              = {
        "Environment" = "production"
        "Name"        = "todo-app"
    }
    unique_id             = "AROARYSLNX44ZXJKNYK53"
}

# aws_iam_role.ecs_execution_role:
resource "aws_iam_role" "ecs_execution_role" {
    arn                   = "arn:aws:iam::121491013433:role/ecs_execution_role"
    assume_role_policy    = jsonencode(
        {
            Statement = [
                {
                    Action    = "sts:AssumeRole"
                    Effect    = "Allow"
                    Principal = {
                        Service = "ecs-tasks.amazonaws.com"
                    }
                },
            ]
            Version   = "2012-10-17"
        }
    )
    create_date           = "2023-09-08T14:15:32Z"
    force_detach_policies = false
    id                    = "ecs_execution_role"
    managed_policy_arns   = [
        "arn:aws:iam::121491013433:policy/CloudWatchCustomPermissions",
        "arn:aws:iam::121491013433:policy/ECRTaskCustomPermissions",
        "arn:aws:iam::121491013433:policy/ECSAccessToSecrets",
    ]
    max_session_duration  = 3600
    name                  = "ecs_execution_role"
    path                  = "/"
    role_last_used        = [
        {
            last_used_date = "2023-09-08T14:22:31Z"
            region         = "us-west-2"
        },
    ]
    tags                  = {}
    tags_all              = {
        "Environment" = "production"
        "Name"        = "todo-app"
    }
    unique_id             = "AROARYSLNX44YQYED5YH3"
}

# aws_iam_role.ecs_task_role:
resource "aws_iam_role" "ecs_task_role" {
    arn                   = "arn:aws:iam::121491013433:role/ecs_task_role"
    assume_role_policy    = jsonencode(
        {
            Statement = [
                {
                    Action    = "sts:AssumeRole"
                    Effect    = "Allow"
                    Principal = {
                        Service = "ecs-tasks.amazonaws.com"
                    }
                },
            ]
            Version   = "2012-10-17"
        }
    )
    create_date           = "2023-09-08T14:15:32Z"
    force_detach_policies = false
    id                    = "ecs_task_role"
    managed_policy_arns   = [
        "arn:aws:iam::121491013433:policy/ECSAccessToSecrets",
        "arn:aws:iam::121491013433:policy/S3FullAccessPolicy",
        "arn:aws:iam::121491013433:policy/ecs_docdb_access",
    ]
    max_session_duration  = 3600
    name                  = "ecs_task_role"
    path                  = "/"
    role_last_used        = [
        {
            last_used_date = ""
            region         = ""
        },
    ]
    tags                  = {}
    tags_all              = {
        "Environment" = "production"
        "Name"        = "todo-app"
    }
    unique_id             = "AROARYSLNX44563F4L7ES"
}

# aws_iam_role.s3_role:
resource "aws_iam_role" "s3_role" {
    arn                   = "arn:aws:iam::121491013433:role/S3FullAccessRole"
    assume_role_policy    = jsonencode(
        {
            Statement = [
                {
                    Action    = "sts:AssumeRole"
                    Effect    = "Allow"
                    Principal = {
                        Service = "ecs.amazonaws.com"
                    }
                    Sid       = ""
                },
            ]
            Version   = "2012-10-17"
        }
    )
    create_date           = "2023-09-08T14:15:32Z"
    force_detach_policies = false
    id                    = "S3FullAccessRole"
    managed_policy_arns   = [
        "arn:aws:iam::121491013433:policy/S3FullAccessPolicy",
    ]
    max_session_duration  = 3600
    name                  = "S3FullAccessRole"
    path                  = "/"
    role_last_used        = [
        {
            last_used_date = ""
            region         = ""
        },
    ]
    tags                  = {}
    tags_all              = {
        "Environment" = "production"
        "Name"        = "todo-app"
    }
    unique_id             = "AROARYSLNX44S63GTWJSI"
}

# aws_iam_role_policy_attachment.cloudwatch_policy_attachment:
resource "aws_iam_role_policy_attachment" "cloudwatch_policy_attachment" {
    id         = "ecs_execution_role-20230908141532984300000005"
    policy_arn = "arn:aws:iam::121491013433:policy/CloudWatchCustomPermissions"
    role       = "ecs_execution_role"
}

# aws_iam_role_policy_attachment.custom_ecr_policy_attachment:
resource "aws_iam_role_policy_attachment" "custom_ecr_policy_attachment" {
    id         = "ecs_execution_role-20230908141532974900000004"
    policy_arn = "arn:aws:iam::121491013433:policy/ECRTaskCustomPermissions"
    role       = "ecs_execution_role"
}

# aws_iam_role_policy_attachment.custom_s3_policy_attachment:
resource "aws_iam_role_policy_attachment" "custom_s3_policy_attachment" {
    id         = "ecs_task_role-20230908141535216200000009"
    policy_arn = "arn:aws:iam::121491013433:policy/S3FullAccessPolicy"
    role       = "ecs_task_role"
}

# aws_iam_role_policy_attachment.docdb_cloudwatch_attach:
resource "aws_iam_role_policy_attachment" "docdb_cloudwatch_attach" {
    id         = "DocDBCloudWatchRole-20230908141532791500000002"
    policy_arn = "arn:aws:iam::aws:policy/AmazonRDSFullAccess"
    role       = "DocDBCloudWatchRole"
}

# aws_iam_role_policy_attachment.ecs_docdb_attach:
resource "aws_iam_role_policy_attachment" "ecs_docdb_attach" {
    id         = "ecs_task_role-20230908141532858400000003"
    policy_arn = "arn:aws:iam::121491013433:policy/ecs_docdb_access"
    role       = "ecs_task_role"
}

# aws_iam_role_policy_attachment.ecs_secrets_access_attachment:
resource "aws_iam_role_policy_attachment" "ecs_secrets_access_attachment" {
    id         = "ecs_task_role-20230908141533163900000006"
    policy_arn = "arn:aws:iam::121491013433:policy/ECSAccessToSecrets"
    role       = "ecs_task_role"
}

# aws_iam_role_policy_attachment.ecs_secrets_access_exec_attachment:
resource "aws_iam_role_policy_attachment" "ecs_secrets_access_exec_attachment" {
    id         = "ecs_execution_role-20230908141533195700000007"
    policy_arn = "arn:aws:iam::121491013433:policy/ECSAccessToSecrets"
    role       = "ecs_execution_role"
}

# aws_iam_role_policy_attachment.s3_role_policy_attachment:
resource "aws_iam_role_policy_attachment" "s3_role_policy_attachment" {
    id         = "S3FullAccessRole-2023090814153522500000000a"
    policy_arn = "arn:aws:iam::121491013433:policy/S3FullAccessPolicy"
    role       = "S3FullAccessRole"
}

# aws_internet_gateway.gateway:
resource "aws_internet_gateway" "gateway" {
    arn      = "arn:aws:ec2:us-west-2:121491013433:internet-gateway/igw-0db5729044f8e8e7c"
    id       = "igw-0db5729044f8e8e7c"
    owner_id = "121491013433"
    tags     = {}
    tags_all = {
        "Environment" = "production"
        "Name"        = "todo-app"
    }
    vpc_id   = "vpc-02942f98c99a7381b"
}

# aws_lb.todo_app_lb:
resource "aws_lb" "todo_app_lb" {
    arn                                         = "arn:aws:elasticloadbalancing:us-west-2:121491013433:loadbalancer/app/todo-app-lb/69b98ce31a8299e3"
    arn_suffix                                  = "app/todo-app-lb/69b98ce31a8299e3"
    desync_mitigation_mode                      = "defensive"
    dns_name                                    = "todo-app-lb-1322777418.us-west-2.elb.amazonaws.com"
    drop_invalid_header_fields                  = false
    enable_cross_zone_load_balancing            = true
    enable_deletion_protection                  = false
    enable_http2                                = true
    enable_tls_version_and_cipher_suite_headers = false
    enable_waf_fail_open                        = false
    enable_xff_client_port                      = false
    id                                          = "arn:aws:elasticloadbalancing:us-west-2:121491013433:loadbalancer/app/todo-app-lb/69b98ce31a8299e3"
    idle_timeout                                = 60
    internal                                    = false
    ip_address_type                             = "ipv4"
    load_balancer_type                          = "application"
    name                                        = "todo-app-lb"
    preserve_host_header                        = false
    security_groups                             = [
        "sg-0bffcfa8e4e65cc09",
    ]
    subnets                                     = [
        "subnet-006858f5d12374e26",
        "subnet-08684860287b0d1b4",
    ]
    tags                                        = {}
    tags_all                                    = {
        "Environment" = "production"
        "Name"        = "todo-app"
    }
    vpc_id                                      = "vpc-02942f98c99a7381b"
    xff_header_processing_mode                  = "append"
    zone_id                                     = "Z1H1FL5HABSF5"

    access_logs {
        enabled = false
    }

    subnet_mapping {
        subnet_id = "subnet-006858f5d12374e26"
    }
    subnet_mapping {
        subnet_id = "subnet-08684860287b0d1b4"
    }
}

# aws_lb_listener.todo_app_alb_listener:
resource "aws_lb_listener" "todo_app_alb_listener" {
    arn               = "arn:aws:elasticloadbalancing:us-west-2:121491013433:listener/app/todo-app-lb/69b98ce31a8299e3/f6ae467ed440d89e"
    id                = "arn:aws:elasticloadbalancing:us-west-2:121491013433:listener/app/todo-app-lb/69b98ce31a8299e3/f6ae467ed440d89e"
    load_balancer_arn = "arn:aws:elasticloadbalancing:us-west-2:121491013433:loadbalancer/app/todo-app-lb/69b98ce31a8299e3"
    port              = 80
    protocol          = "HTTP"
    tags              = {}
    tags_all          = {
        "Environment" = "production"
        "Name"        = "todo-app"
    }

    default_action {
        order = 1
        type  = "fixed-response"

        fixed_response {
            content_type = "text/plain"
            message_body = "404: Not Found"
            status_code  = "404"
        }
    }
}

# aws_lb_listener_rule.back_end_rule:
resource "aws_lb_listener_rule" "back_end_rule" {
    arn          = "arn:aws:elasticloadbalancing:us-west-2:121491013433:listener-rule/app/todo-app-lb/69b98ce31a8299e3/f6ae467ed440d89e/78d72069a2d080d1"
    id           = "arn:aws:elasticloadbalancing:us-west-2:121491013433:listener-rule/app/todo-app-lb/69b98ce31a8299e3/f6ae467ed440d89e/78d72069a2d080d1"
    listener_arn = "arn:aws:elasticloadbalancing:us-west-2:121491013433:listener/app/todo-app-lb/69b98ce31a8299e3/f6ae467ed440d89e"
    priority     = 200
    tags         = {}
    tags_all     = {
        "Environment" = "production"
        "Name"        = "todo-app"
    }

    action {
        order            = 1
        target_group_arn = "arn:aws:elasticloadbalancing:us-west-2:121491013433:targetgroup/todo-backend-target-group/b2d2becf7bbe9ae0"
        type             = "forward"
    }

    condition {
        path_pattern {
            values = [
                "/health",
                "/todos",
            ]
        }
    }
}

# aws_lb_target_group.todo_app_backend_target_group:
resource "aws_lb_target_group" "todo_app_backend_target_group" {
    arn                                = "arn:aws:elasticloadbalancing:us-west-2:121491013433:targetgroup/todo-backend-target-group/b2d2becf7bbe9ae0"
    arn_suffix                         = "targetgroup/todo-backend-target-group/b2d2becf7bbe9ae0"
    connection_termination             = false
    deregistration_delay               = "300"
    id                                 = "arn:aws:elasticloadbalancing:us-west-2:121491013433:targetgroup/todo-backend-target-group/b2d2becf7bbe9ae0"
    ip_address_type                    = "ipv4"
    lambda_multi_value_headers_enabled = false
    load_balancing_algorithm_type      = "round_robin"
    load_balancing_cross_zone_enabled  = "use_load_balancer_configuration"
    name                               = "todo-backend-target-group"
    port                               = 5000
    protocol                           = "HTTP"
    protocol_version                   = "HTTP1"
    proxy_protocol_v2                  = false
    slow_start                         = 0
    tags                               = {
        "Name" = "todo-lb-tg"
    }
    tags_all                           = {
        "Environment" = "production"
        "Name"        = "todo-lb-tg"
    }
    target_type                        = "ip"
    vpc_id                             = "vpc-02942f98c99a7381b"

    health_check {
        enabled             = true
        healthy_threshold   = 3
        interval            = 60
        matcher             = "200"
        path                = "/health"
        port                = "traffic-port"
        protocol            = "HTTP"
        timeout             = 3
        unhealthy_threshold = 2
    }

    stickiness {
        cookie_duration = 86400
        enabled         = false
        type            = "lb_cookie"
    }

    target_failover {}
}

# aws_nat_gateway.nat_gateway:
resource "aws_nat_gateway" "nat_gateway" {
    allocation_id        = "eipalloc-06ea0efa223d3cce4"
    association_id       = "eipassoc-02a3a9a850dfc1d98"
    connectivity_type    = "public"
    id                   = "nat-078309218b0a0c4e6"
    network_interface_id = "eni-0780dce576687a5eb"
    private_ip           = "10.10.2.247"
    public_ip            = "52.39.80.135"
    subnet_id            = "subnet-08684860287b0d1b4"
    tags                 = {}
    tags_all             = {
        "Environment" = "production"
        "Name"        = "todo-app"
    }
}

# aws_route_table.private[0]:
resource "aws_route_table" "private" {
    arn              = "arn:aws:ec2:us-west-2:121491013433:route-table/rtb-0ef5e136cbe497981"
    id               = "rtb-0ef5e136cbe497981"
    owner_id         = "121491013433"
    propagating_vgws = []
    route            = [
        {
            carrier_gateway_id         = ""
            cidr_block                 = "0.0.0.0/0"
            core_network_arn           = ""
            destination_prefix_list_id = ""
            egress_only_gateway_id     = ""
            gateway_id                 = ""
            instance_id                = ""
            ipv6_cidr_block            = ""
            local_gateway_id           = ""
            nat_gateway_id             = "nat-078309218b0a0c4e6"
            network_interface_id       = ""
            transit_gateway_id         = ""
            vpc_endpoint_id            = ""
            vpc_peering_connection_id  = ""
        },
    ]
    tags             = {}
    tags_all         = {
        "Environment" = "production"
        "Name"        = "todo-app"
    }
    vpc_id           = "vpc-02942f98c99a7381b"
}

# aws_route_table.private[1]:
resource "aws_route_table" "private" {
    arn              = "arn:aws:ec2:us-west-2:121491013433:route-table/rtb-0efb278349249c871"
    id               = "rtb-0efb278349249c871"
    owner_id         = "121491013433"
    propagating_vgws = []
    route            = [
        {
            carrier_gateway_id         = ""
            cidr_block                 = "0.0.0.0/0"
            core_network_arn           = ""
            destination_prefix_list_id = ""
            egress_only_gateway_id     = ""
            gateway_id                 = ""
            instance_id                = ""
            ipv6_cidr_block            = ""
            local_gateway_id           = ""
            nat_gateway_id             = "nat-078309218b0a0c4e6"
            network_interface_id       = ""
            transit_gateway_id         = ""
            vpc_endpoint_id            = ""
            vpc_peering_connection_id  = ""
        },
    ]
    tags             = {}
    tags_all         = {
        "Environment" = "production"
        "Name"        = "todo-app"
    }
    vpc_id           = "vpc-02942f98c99a7381b"
}

# aws_route_table.public:
resource "aws_route_table" "public" {
    arn              = "arn:aws:ec2:us-west-2:121491013433:route-table/rtb-052b6da29ac33596f"
    id               = "rtb-052b6da29ac33596f"
    owner_id         = "121491013433"
    propagating_vgws = []
    route            = [
        {
            carrier_gateway_id         = ""
            cidr_block                 = "0.0.0.0/0"
            core_network_arn           = ""
            destination_prefix_list_id = ""
            egress_only_gateway_id     = ""
            gateway_id                 = "igw-0db5729044f8e8e7c"
            instance_id                = ""
            ipv6_cidr_block            = ""
            local_gateway_id           = ""
            nat_gateway_id             = ""
            network_interface_id       = ""
            transit_gateway_id         = ""
            vpc_endpoint_id            = ""
            vpc_peering_connection_id  = ""
        },
    ]
    tags             = {}
    tags_all         = {
        "Environment" = "production"
        "Name"        = "todo-app"
    }
    vpc_id           = "vpc-02942f98c99a7381b"
}

# aws_route_table_association.private[0]:
resource "aws_route_table_association" "private" {
    id             = "rtbassoc-0beb5e64fff998cdf"
    route_table_id = "rtb-0ef5e136cbe497981"
    subnet_id      = "subnet-0b93fd3fddfcad2bd"
}

# aws_route_table_association.private[1]:
resource "aws_route_table_association" "private" {
    id             = "rtbassoc-0231f4a35967f4aac"
    route_table_id = "rtb-0efb278349249c871"
    subnet_id      = "subnet-05e3d596914ead2ef"
}

# aws_route_table_association.public[0]:
resource "aws_route_table_association" "public" {
    id             = "rtbassoc-0f470146d46d70082"
    route_table_id = "rtb-052b6da29ac33596f"
    subnet_id      = "subnet-08684860287b0d1b4"
}

# aws_route_table_association.public[1]:
resource "aws_route_table_association" "public" {
    id             = "rtbassoc-072252dc81620f3b1"
    route_table_id = "rtb-052b6da29ac33596f"
    subnet_id      = "subnet-006858f5d12374e26"
}

# aws_s3_bucket.todo_app_website:
resource "aws_s3_bucket" "todo_app_website" {
    arn                         = "arn:aws:s3:::todo-bucket-engaging-lamb"
    bucket                      = "todo-bucket-engaging-lamb"
    bucket_domain_name          = "todo-bucket-engaging-lamb.s3.amazonaws.com"
    bucket_regional_domain_name = "todo-bucket-engaging-lamb.s3.us-west-2.amazonaws.com"
    force_destroy               = true
    hosted_zone_id              = "Z3BJ6K6RIION7M"
    id                          = "todo-bucket-engaging-lamb"
    object_lock_enabled         = false
    policy                      = jsonencode(
        {
            Statement = [
                {
                    Action    = "s3:GetObject"
                    Effect    = "Allow"
                    Principal = {
                        AWS = "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity E217N18Q9GN8HJ"
                    }
                    Resource  = "arn:aws:s3:::todo-bucket-engaging-lamb/*"
                    Sid       = "CloudFrontOAI"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    region                      = "us-west-2"
    request_payer               = "BucketOwner"
    tags                        = {}
    tags_all                    = {
        "Environment" = "production"
        "Name"        = "todo-app"
    }
    website_domain              = "s3-website-us-west-2.amazonaws.com"
    website_endpoint            = "todo-bucket-engaging-lamb.s3-website-us-west-2.amazonaws.com"

    grant {
        id          = "7dbd1406c0e27d4ebc15169e9e076eb0517a38046923668e28781b1ad1dfd4b0"
        permissions = [
            "FULL_CONTROL",
        ]
        type        = "CanonicalUser"
    }

    server_side_encryption_configuration {
        rule {
            bucket_key_enabled = false

            apply_server_side_encryption_by_default {
                sse_algorithm = "AES256"
            }
        }
    }

    versioning {
        enabled    = false
        mfa_delete = false
    }

    website {
        error_document = "404.html"
        index_document = "index.html"
    }
}

# aws_s3_bucket_policy.website:
resource "aws_s3_bucket_policy" "website" {
    bucket = "todo-bucket-engaging-lamb"
    id     = "todo-bucket-engaging-lamb"
    policy = jsonencode(
        {
            Statement = [
                {
                    Action    = "s3:GetObject"
                    Effect    = "Allow"
                    Principal = {
                        AWS = "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity E217N18Q9GN8HJ"
                    }
                    Resource  = "arn:aws:s3:::todo-bucket-engaging-lamb/*"
                    Sid       = "CloudFrontOAI"
                },
            ]
            Version   = "2012-10-17"
        }
    )
}

# aws_s3_bucket_website_configuration.frontend_website:
resource "aws_s3_bucket_website_configuration" "frontend_website" {
    bucket           = "todo-bucket-engaging-lamb"
    id               = "todo-bucket-engaging-lamb"
    website_domain   = "s3-website-us-west-2.amazonaws.com"
    website_endpoint = "todo-bucket-engaging-lamb.s3-website-us-west-2.amazonaws.com"

    error_document {
        key = "404.html"
    }

    index_document {
        suffix = "index.html"
    }
}

# aws_secretsmanager_secret.docdb_credentials:
resource "aws_secretsmanager_secret" "docdb_credentials" {
    arn                            = "arn:aws:secretsmanager:us-west-2:121491013433:secret:todo-docdb_credentials-light-mackerel-PXiIe2"
    force_overwrite_replica_secret = false
    id                             = "arn:aws:secretsmanager:us-west-2:121491013433:secret:todo-docdb_credentials-light-mackerel-PXiIe2"
    name                           = "todo-docdb_credentials-light-mackerel"
    recovery_window_in_days        = 30
    rotation_enabled               = false
    tags                           = {}
    tags_all                       = {
        "Environment" = "production"
        "Name"        = "todo-app"
    }
}

# aws_secretsmanager_secret_version.db_secret_version:
resource "aws_secretsmanager_secret_version" "db_secret_version" {
    arn            = "arn:aws:secretsmanager:us-west-2:121491013433:secret:todo-docdb_credentials-light-mackerel-PXiIe2"
    id             = "arn:aws:secretsmanager:us-west-2:121491013433:secret:todo-docdb_credentials-light-mackerel-PXiIe2|B82DDE8D-3FA6-41AE-B4F1-6B2CAFF4D3FB"
    secret_id      = "arn:aws:secretsmanager:us-west-2:121491013433:secret:todo-docdb_credentials-light-mackerel-PXiIe2"
    secret_string  = (sensitive value)
    version_id     = "B82DDE8D-3FA6-41AE-B4F1-6B2CAFF4D3FB"
    version_stages = [
        "AWSCURRENT",
    ]
}

# aws_security_group.docdb_sg:
resource "aws_security_group" "docdb_sg" {
    arn                    = "arn:aws:ec2:us-west-2:121491013433:security-group/sg-0a5e0c96543e5353a"
    description            = "Security group for DocumentDB"
    egress                 = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = ""
            from_port        = 0
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "-1"
            security_groups  = []
            self             = false
            to_port          = 0
        },
    ]
    id                     = "sg-0a5e0c96543e5353a"
    ingress                = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
                "10.10.0.0/16",
            ]
            description      = ""
            from_port        = 27017
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = []
            self             = false
            to_port          = 27017
        },
    ]
    name                   = "docdb_sg"
    owner_id               = "121491013433"
    revoke_rules_on_delete = false
    tags                   = {
        "Name" = "docdb_sg"
    }
    tags_all               = {
        "Environment" = "production"
        "Name"        = "docdb_sg"
    }
    vpc_id                 = "vpc-02942f98c99a7381b"
}

# aws_security_group.ecs_cluster:
resource "aws_security_group" "ecs_cluster" {
    arn                    = "arn:aws:ec2:us-west-2:121491013433:security-group/sg-02cf2895a65cd13d3"
    description            = "Security group for ECS cluster instances"
    egress                 = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = ""
            from_port        = 0
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "-1"
            security_groups  = []
            self             = false
            to_port          = 0
        },
    ]
    id                     = "sg-02cf2895a65cd13d3"
    ingress                = [
        {
            cidr_blocks      = []
            description      = ""
            from_port        = 0
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = [
                "sg-0f04b5378baee4a15",
            ]
            self             = false
            to_port          = 65535
        },
        {
            cidr_blocks      = []
            description      = ""
            from_port        = 0
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "udp"
            security_groups  = [
                "sg-0f04b5378baee4a15",
            ]
            self             = false
            to_port          = 65535
        },
    ]
    name                   = "ecs_cluster_sg"
    owner_id               = "121491013433"
    revoke_rules_on_delete = false
    tags                   = {
        "Name" = "ecs_cluster_sg"
    }
    tags_all               = {
        "Environment" = "production"
        "Name"        = "ecs_cluster_sg"
    }
    vpc_id                 = "vpc-02942f98c99a7381b"
}

# aws_security_group.ecs_tasks:
resource "aws_security_group" "ecs_tasks" {
    arn                    = "arn:aws:ec2:us-west-2:121491013433:security-group/sg-0f04b5378baee4a15"
    description            = "Security group for ECS tasks"
    egress                 = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = ""
            from_port        = 0
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "-1"
            security_groups  = []
            self             = false
            to_port          = 0
        },
    ]
    id                     = "sg-0f04b5378baee4a15"
    ingress                = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
                "10.10.0.0/16",
            ]
            description      = ""
            from_port        = 27017
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = []
            self             = false
            to_port          = 27017
        },
        {
            cidr_blocks      = [
                "0.0.0.0/0",
                "10.10.0.0/16",
            ]
            description      = ""
            from_port        = 3000
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = []
            self             = false
            to_port          = 3000
        },
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = ""
            from_port        = 5000
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = []
            self             = false
            to_port          = 5000
        },
    ]
    name                   = "ecs_tasks_sg"
    owner_id               = "121491013433"
    revoke_rules_on_delete = false
    tags                   = {
        "Name" = "ecs_tasks_sg"
    }
    tags_all               = {
        "Environment" = "production"
        "Name"        = "ecs_tasks_sg"
    }
    vpc_id                 = "vpc-02942f98c99a7381b"
}

# aws_security_group.lb:
resource "aws_security_group" "lb" {
    arn                    = "arn:aws:ec2:us-west-2:121491013433:security-group/sg-0bffcfa8e4e65cc09"
    description            = "Managed by Terraform"
    egress                 = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = ""
            from_port        = 0
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "-1"
            security_groups  = []
            self             = false
            to_port          = 0
        },
    ]
    id                     = "sg-0bffcfa8e4e65cc09"
    ingress                = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = ""
            from_port        = 80
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = []
            self             = false
            to_port          = 5000
        },
    ]
    name                   = "todo-alb-security-group"
    owner_id               = "121491013433"
    revoke_rules_on_delete = false
    tags                   = {}
    tags_all               = {
        "Environment" = "production"
        "Name"        = "todo-app"
    }
    vpc_id                 = "vpc-02942f98c99a7381b"
}

# aws_subnet.private[0]:
resource "aws_subnet" "private" {
    arn                                            = "arn:aws:ec2:us-west-2:121491013433:subnet/subnet-0b93fd3fddfcad2bd"
    assign_ipv6_address_on_creation                = false
    availability_zone                              = "us-west-2a"
    availability_zone_id                           = "usw2-az1"
    cidr_block                                     = "10.10.0.0/24"
    enable_dns64                                   = false
    enable_lni_at_device_index                     = 0
    enable_resource_name_dns_a_record_on_launch    = false
    enable_resource_name_dns_aaaa_record_on_launch = false
    id                                             = "subnet-0b93fd3fddfcad2bd"
    ipv6_native                                    = false
    map_customer_owned_ip_on_launch                = false
    map_public_ip_on_launch                        = false
    owner_id                                       = "121491013433"
    private_dns_hostname_type_on_launch            = "ip-name"
    tags                                           = {
        "Name" = "private-subnet-0"
    }
    tags_all                                       = {
        "Environment" = "production"
        "Name"        = "private-subnet-0"
    }
    vpc_id                                         = "vpc-02942f98c99a7381b"
}

# aws_subnet.private[1]:
resource "aws_subnet" "private" {
    arn                                            = "arn:aws:ec2:us-west-2:121491013433:subnet/subnet-05e3d596914ead2ef"
    assign_ipv6_address_on_creation                = false
    availability_zone                              = "us-west-2b"
    availability_zone_id                           = "usw2-az2"
    cidr_block                                     = "10.10.1.0/24"
    enable_dns64                                   = false
    enable_lni_at_device_index                     = 0
    enable_resource_name_dns_a_record_on_launch    = false
    enable_resource_name_dns_aaaa_record_on_launch = false
    id                                             = "subnet-05e3d596914ead2ef"
    ipv6_native                                    = false
    map_customer_owned_ip_on_launch                = false
    map_public_ip_on_launch                        = false
    owner_id                                       = "121491013433"
    private_dns_hostname_type_on_launch            = "ip-name"
    tags                                           = {
        "Name" = "private-subnet-1"
    }
    tags_all                                       = {
        "Environment" = "production"
        "Name"        = "private-subnet-1"
    }
    vpc_id                                         = "vpc-02942f98c99a7381b"
}

# aws_subnet.public[0]:
resource "aws_subnet" "public" {
    arn                                            = "arn:aws:ec2:us-west-2:121491013433:subnet/subnet-08684860287b0d1b4"
    assign_ipv6_address_on_creation                = false
    availability_zone                              = "us-west-2a"
    availability_zone_id                           = "usw2-az1"
    cidr_block                                     = "10.10.2.0/24"
    enable_dns64                                   = false
    enable_lni_at_device_index                     = 0
    enable_resource_name_dns_a_record_on_launch    = false
    enable_resource_name_dns_aaaa_record_on_launch = false
    id                                             = "subnet-08684860287b0d1b4"
    ipv6_native                                    = false
    map_customer_owned_ip_on_launch                = false
    map_public_ip_on_launch                        = true
    owner_id                                       = "121491013433"
    private_dns_hostname_type_on_launch            = "ip-name"
    tags                                           = {
        "Name" = "public-subnet-0"
    }
    tags_all                                       = {
        "Environment" = "production"
        "Name"        = "public-subnet-0"
    }
    vpc_id                                         = "vpc-02942f98c99a7381b"
}

# aws_subnet.public[1]:
resource "aws_subnet" "public" {
    arn                                            = "arn:aws:ec2:us-west-2:121491013433:subnet/subnet-006858f5d12374e26"
    assign_ipv6_address_on_creation                = false
    availability_zone                              = "us-west-2b"
    availability_zone_id                           = "usw2-az2"
    cidr_block                                     = "10.10.3.0/24"
    enable_dns64                                   = false
    enable_lni_at_device_index                     = 0
    enable_resource_name_dns_a_record_on_launch    = false
    enable_resource_name_dns_aaaa_record_on_launch = false
    id                                             = "subnet-006858f5d12374e26"
    ipv6_native                                    = false
    map_customer_owned_ip_on_launch                = false
    map_public_ip_on_launch                        = true
    owner_id                                       = "121491013433"
    private_dns_hostname_type_on_launch            = "ip-name"
    tags                                           = {
        "Name" = "public-subnet-1"
    }
    tags_all                                       = {
        "Environment" = "production"
        "Name"        = "public-subnet-1"
    }
    vpc_id                                         = "vpc-02942f98c99a7381b"
}

# aws_vpc.todo_vpc:
resource "aws_vpc" "todo_vpc" {
    arn                                  = "arn:aws:ec2:us-west-2:121491013433:vpc/vpc-02942f98c99a7381b"
    assign_generated_ipv6_cidr_block     = false
    cidr_block                           = "10.10.0.0/16"
    default_network_acl_id               = "acl-0f9787048013020f8"
    default_route_table_id               = "rtb-0873f1a6b13ec31c3"
    default_security_group_id            = "sg-048e30f078741bad0"
    dhcp_options_id                      = "dopt-04455bf2a643f17fb"
    enable_classiclink                   = false
    enable_classiclink_dns_support       = false
    enable_dns_hostnames                 = true
    enable_dns_support                   = true
    enable_network_address_usage_metrics = false
    id                                   = "vpc-02942f98c99a7381b"
    instance_tenancy                     = "default"
    ipv6_netmask_length                  = 0
    main_route_table_id                  = "rtb-0873f1a6b13ec31c3"
    owner_id                             = "121491013433"
    tags                                 = {
        "Name" = "todo-vpc"
    }
    tags_all                             = {
        "Environment" = "production"
        "Name"        = "todo-vpc"
    }
}

# aws_vpc_endpoint.ecr_api:
resource "aws_vpc_endpoint" "ecr_api" {
    arn                   = "arn:aws:ec2:us-west-2:121491013433:vpc-endpoint/vpce-024ebef2b822165e4"
    cidr_blocks           = []
    dns_entry             = [
        {
            dns_name       = "vpce-024ebef2b822165e4-ig6tvp5e.api.ecr.us-west-2.vpce.amazonaws.com"
            hosted_zone_id = "Z1YSA3EXCYUU9Z"
        },
        {
            dns_name       = "vpce-024ebef2b822165e4-ig6tvp5e-us-west-2a.api.ecr.us-west-2.vpce.amazonaws.com"
            hosted_zone_id = "Z1YSA3EXCYUU9Z"
        },
        {
            dns_name       = "vpce-024ebef2b822165e4-ig6tvp5e-us-west-2b.api.ecr.us-west-2.vpce.amazonaws.com"
            hosted_zone_id = "Z1YSA3EXCYUU9Z"
        },
    ]
    id                    = "vpce-024ebef2b822165e4"
    ip_address_type       = "ipv4"
    network_interface_ids = [
        "eni-0699471b8c19eb2e9",
        "eni-0facbf0d37e4dcb17",
    ]
    owner_id              = "121491013433"
    policy                = jsonencode(
        {
            Statement = [
                {
                    Action    = "*"
                    Effect    = "Allow"
                    Principal = "*"
                    Resource  = "*"
                },
            ]
        }
    )
    private_dns_enabled   = false
    requester_managed     = false
    route_table_ids       = []
    security_group_ids    = [
        "sg-0f04b5378baee4a15",
    ]
    service_name          = "com.amazonaws.us-west-2.ecr.api"
    state                 = "available"
    subnet_ids            = [
        "subnet-05e3d596914ead2ef",
        "subnet-0b93fd3fddfcad2bd",
    ]
    tags                  = {}
    tags_all              = {
        "Environment" = "production"
        "Name"        = "todo-app"
    }
    vpc_endpoint_type     = "Interface"
    vpc_id                = "vpc-02942f98c99a7381b"

    dns_options {
        dns_record_ip_type = "ipv4"
    }
}

# aws_vpc_endpoint.ecr_dkr:
resource "aws_vpc_endpoint" "ecr_dkr" {
    arn                   = "arn:aws:ec2:us-west-2:121491013433:vpc-endpoint/vpce-01cab48d0ac0ecb23"
    cidr_blocks           = []
    dns_entry             = [
        {
            dns_name       = "vpce-01cab48d0ac0ecb23-n2kki6b1.dkr.ecr.us-west-2.vpce.amazonaws.com"
            hosted_zone_id = "Z1YSA3EXCYUU9Z"
        },
        {
            dns_name       = "vpce-01cab48d0ac0ecb23-n2kki6b1-us-west-2a.dkr.ecr.us-west-2.vpce.amazonaws.com"
            hosted_zone_id = "Z1YSA3EXCYUU9Z"
        },
        {
            dns_name       = "vpce-01cab48d0ac0ecb23-n2kki6b1-us-west-2b.dkr.ecr.us-west-2.vpce.amazonaws.com"
            hosted_zone_id = "Z1YSA3EXCYUU9Z"
        },
    ]
    id                    = "vpce-01cab48d0ac0ecb23"
    ip_address_type       = "ipv4"
    network_interface_ids = [
        "eni-00e1de1c125423507",
        "eni-016ca4f40b6b24af8",
    ]
    owner_id              = "121491013433"
    policy                = jsonencode(
        {
            Statement = [
                {
                    Action    = "*"
                    Effect    = "Allow"
                    Principal = "*"
                    Resource  = "*"
                },
            ]
        }
    )
    private_dns_enabled   = false
    requester_managed     = false
    route_table_ids       = []
    security_group_ids    = [
        "sg-0f04b5378baee4a15",
    ]
    service_name          = "com.amazonaws.us-west-2.ecr.dkr"
    state                 = "available"
    subnet_ids            = [
        "subnet-05e3d596914ead2ef",
        "subnet-0b93fd3fddfcad2bd",
    ]
    tags                  = {}
    tags_all              = {
        "Environment" = "production"
        "Name"        = "todo-app"
    }
    vpc_endpoint_type     = "Interface"
    vpc_id                = "vpc-02942f98c99a7381b"

    dns_options {
        dns_record_ip_type = "ipv4"
    }
}

# aws_vpc_endpoint.logs:
resource "aws_vpc_endpoint" "logs" {
    arn                   = "arn:aws:ec2:us-west-2:121491013433:vpc-endpoint/vpce-03ac9f4e23e24ad01"
    cidr_blocks           = []
    dns_entry             = [
        {
            dns_name       = "vpce-03ac9f4e23e24ad01-kmvb5qpn.logs.us-west-2.vpce.amazonaws.com"
            hosted_zone_id = "Z1YSA3EXCYUU9Z"
        },
        {
            dns_name       = "vpce-03ac9f4e23e24ad01-kmvb5qpn-us-west-2b.logs.us-west-2.vpce.amazonaws.com"
            hosted_zone_id = "Z1YSA3EXCYUU9Z"
        },
        {
            dns_name       = "vpce-03ac9f4e23e24ad01-kmvb5qpn-us-west-2a.logs.us-west-2.vpce.amazonaws.com"
            hosted_zone_id = "Z1YSA3EXCYUU9Z"
        },
    ]
    id                    = "vpce-03ac9f4e23e24ad01"
    ip_address_type       = "ipv4"
    network_interface_ids = [
        "eni-030a3fd50ac4fcaee",
        "eni-0c95aef9fb78e88d9",
    ]
    owner_id              = "121491013433"
    policy                = jsonencode(
        {
            Statement = [
                {
                    Action    = "*"
                    Effect    = "Allow"
                    Principal = "*"
                    Resource  = "*"
                },
            ]
        }
    )
    private_dns_enabled   = false
    requester_managed     = false
    route_table_ids       = []
    security_group_ids    = [
        "sg-0f04b5378baee4a15",
    ]
    service_name          = "com.amazonaws.us-west-2.logs"
    state                 = "available"
    subnet_ids            = [
        "subnet-05e3d596914ead2ef",
        "subnet-0b93fd3fddfcad2bd",
    ]
    tags                  = {}
    tags_all              = {
        "Environment" = "production"
        "Name"        = "todo-app"
    }
    vpc_endpoint_type     = "Interface"
    vpc_id                = "vpc-02942f98c99a7381b"

    dns_options {
        dns_record_ip_type = "ipv4"
    }
}

# aws_vpc_endpoint.s3:
resource "aws_vpc_endpoint" "s3" {
    arn                   = "arn:aws:ec2:us-west-2:121491013433:vpc-endpoint/vpce-0dec4f2679c0e31a3"
    cidr_blocks           = [
        "3.5.76.0/22",
        "3.5.80.0/21",
        "18.34.48.0/20",
        "18.34.244.0/22",
        "52.92.128.0/17",
        "52.218.128.0/17",
    ]
    dns_entry             = []
    id                    = "vpce-0dec4f2679c0e31a3"
    network_interface_ids = []
    owner_id              = "121491013433"
    policy                = jsonencode(
        {
            Statement = [
                {
                    Action    = "*"
                    Effect    = "Allow"
                    Principal = "*"
                    Resource  = "*"
                },
            ]
            Version   = "2008-10-17"
        }
    )
    prefix_list_id        = "pl-68a54001"
    private_dns_enabled   = false
    requester_managed     = false
    route_table_ids       = [
        "rtb-0ef5e136cbe497981",
        "rtb-0efb278349249c871",
    ]
    security_group_ids    = []
    service_name          = "com.amazonaws.us-west-2.s3"
    state                 = "available"
    subnet_ids            = []
    tags                  = {}
    tags_all              = {
        "Environment" = "production"
        "Name"        = "todo-app"
    }
    vpc_endpoint_type     = "Gateway"
    vpc_id                = "vpc-02942f98c99a7381b"
}

# random_password.db_password:
resource "random_password" "db_password" {
    bcrypt_hash = (sensitive value)
    id          = "none"
    length      = 16
    lower       = true
    min_lower   = 0
    min_numeric = 0
    min_special = 0
    min_upper   = 0
    number      = true
    numeric     = true
    result      = (sensitive value)
    special     = false
    upper       = true
}

# random_pet.bucket_name:
resource "random_pet" "bucket_name" {
    id        = "engaging-lamb"
    length    = 2
    separator = "-"
}

# random_pet.secret_name:
resource "random_pet" "secret_name" {
    id        = "light-mackerel"
    length    = 2
    separator = "-"
}


Outputs:

cloudfront_domain_name = "d1itiastrdvd4e.cloudfront.net"
load_balancer_ip = "todo-app-lb-1322777418.us-west-2.elb.amazonaws.com"
